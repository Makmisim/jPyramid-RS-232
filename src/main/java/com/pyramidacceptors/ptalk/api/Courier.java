/*
 * Copyright (C) 2014 Pyramid Technologies, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.pyramidacceptors.ptalk.api;

import java.util.Iterator;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

import com.pyramidacceptors.ptalk.api.event.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import jssc.SerialPortException;
import jssc.SerialPortTimeoutException;

/**
 * Courier runs the communication loop. This only applies to serial protocols<br>
 * that use a polling logic. e.g. ccTalk or RS-232<br>
 * Courier is threadsafe.
 * <br>
 * @author <a href="mailto:cory@pyramidacceptors.com">Cory Todd</a>
 * @since 1.0.0.0
 */
final class Courier extends Thread {
    private final Logger logger = LoggerFactory.getLogger(Courier.class);

    private PyramidPort port;
    private AtomicBoolean _stopThread = new AtomicBoolean(false);
    private AtomicBoolean _resetRequested = new AtomicBoolean(false);
    private AtomicBoolean _serialNumberRequested = new AtomicBoolean(false);
    private AtomicBoolean _isPaused = new AtomicBoolean(false);

    private boolean _comOkay = true;
    
    // Socket to handle all data IO with slave
    private final RS232Socket socket;
    
    // EventListner list - threadsafe
    private final CopyOnWriteArrayList<RS232EventListener> listeners;

    // Used in case the customer is not using a Pyramid validator.
    private byte rawAcceptorModel;
    private byte rawFirmwareRevision;
    private String rawSerialNumber;

    private CreditActions creditAction = CreditActions.NONE;

    /**
     * Create a new Courier instance<br>
     * <br>
     * @param port to deliver on and listen to
     * @param socket type of packet that will be handled
     */
    Courier(PyramidPort port, RS232Socket socket) {
        this.port = port;
        this.listeners = new CopyOnWriteArrayList<>();
        this.socket = socket;
    }
    
    /**     
     * @return true if the comms are operating properly. The flag may be<br>
     * set to false under the following conditions:
     *   SerialPort disconnected: Device unreachable
     *   Unit stop responding to polls - this is common in RS-232 during <br>
     *     validation. Consider debouncing this value. The logs
     *     will report timing out during validation. This is normal.      
     */
    boolean getCommsOkay() {
        return this._comOkay;
    }


    /**
     * Returns the firmware revision of the connected acceptor.
     * @return String
     */
    public String getFirmwareRevision() {
        return String.format("1.%02x", rawFirmwareRevision & 0xff);
    }

    /**
     * Returns the  acceptor model of the connected acceptor
     * @return AcceptorModel
     */
    public AcceptorModel getAcceptorModel() {
        return AcceptorModel.fromByte(rawAcceptorModel);
    }

    /**
     * Returns the serial number of the attached acceptor
     * @return String
     */
    public String getSerialNumber() {
        return this.rawSerialNumber;
    }

    /**
     * Inject a reset request into the next message loop
     */
    public void requestReset() {
        _resetRequested.set(true);
    }

    /**
     * Inject a serial number request in the next message loop
     */
    public void requestSerialNumer() {
        _serialNumberRequested.set(true);
    }

    /**
     * Enable or disable the message loop. This effectively stops communication
     * without closing the port. If pause is enabled for more than 8 seconds,
     * the bill acceptor will disable itself because the host is not responding.
     * @param pause
     */
    public void pause(boolean pause) {
        _isPaused.set(pause);
    }


    /**
     * Subscribe to events generated by this instance<br>
     * <br>
     * @param l PyramidSerialEventListener
     */
    public void addChangeListener(RS232EventListener l) {
      this.listeners.add(l);
    }
    
    /**
     * Remove all subscriptions to this event.<br>
     * <br>
     */
    public void removeChangeListeners() {
      this.listeners.clear();
    }

    /**
     * Remove subscription to events generate by this instance<br>
     * <br>
     * @param l PyramidSerialEventListener
     */
    public void removeChangeListener(RS232EventListener l) {
      this.listeners.remove(l);
    }

    // Event firing method.  Called internally by other class methods.
    private void fireChangeEvent(PTalkEvent e) {
        for (RS232EventListener l : listeners) {
         l.changeEventReceived(e);
      }
    }
        
    /**
     * Stop the execution and null out reference objects
     */
    protected void stopThread() {
        this._stopThread.set(true);
        port = null;
    }

    /**
     * Start the courier thread. Poll in intervals determined by the poll<br>
     * rate passed to this instance's constructor.
     */
    @Override
    public void run() {
        
        // Loop until we receive client calls the stop thread method
        RS232Packet respPacket;
        byte[] command;
        byte[] resp;

        boolean parseAsSN = false;

        while(!_stopThread.get()) {
            
            try {

                while(_isPaused.get()) {
                    Thread.sleep(RS232Configuration.INSTANCE.getPollrate());
                }

                // If serial number is being requested, run that command instead
                if(_serialNumberRequested.getAndSet(false)) {

                    command = socket.generateCommandCustom(RS232Packet.serialNumberBytes());
                    parseAsSN = true;

                } else if(_resetRequested.getAndSet(false)) {


                   command = socket.generateCommandCustom(RS232Packet.resetBytes());

                } else {

                    // Generate command and send to slave
                    command = socket.generateCommand(creditAction);
                }

                // Notify client that we're sending a packet
                fireChangeEvent(SerialDataEvent.newTxEvent(this, Utilities.bytesToString(command)));

                port.write(command);
                
                // Collect the response
                resp = port.readBytes(socket.getMaxPacketRespSize());

                // Notify that we've received a response
                fireChangeEvent(SerialDataEvent.newRxEvent(this, Utilities.bytesToString(command)));

                // If this is a serial number, parse it differently
                if(parseAsSN) {
                    parseAsSN = false;

                    byte[] sn = new byte[5];
                    System.arraycopy(resp, 3, sn, 0, sn.length);

                    rawSerialNumber = new String(sn);

                } else {

                    respPacket = socket.parseResponse(resp);

                    creditAction = respPacket.getCreditAction();

                    rawFirmwareRevision = respPacket.getFirmwareRevision();

                    rawAcceptorModel = respPacket.getAcceptorModel();


                    PTalkEvent e;
                    for(Events type : respPacket.getInterpretedEvents()) {

                        // Is this an event that requires extra data?
                        switch (type) {

                            case Credit:
                                e = new CreditEvent(
                                        this,
                                        Utilities.bytesToString(resp),
                                        respPacket.getBillName());
                                break;

                            case Escrowed:
                                e = new EscrowedEvent(
                                        this,
                                        Utilities.bytesToString(resp),
                                        respPacket.getBillName());
                                break;

                            default:
                                e = new PTalkEvent(this, type, respPacket.getByteString());

                        }

                        // Notify any listeners that we have data
                        fireChangeEvent(e);
                    }
                }

                // Wait for pollRate milliseconds before looping through again
                sleep(RS232Configuration.INSTANCE.getPollrate());
                       
            } catch (SerialPortException ex) {
                logger.error(ex.getMessage());
                _comOkay = false;
            } catch (SerialPortTimeoutException ex1) {
                logger.error("SendBytes timed out. ({0} ms)", APIConstants.COMM_TIMEOUT);
                _comOkay = false;
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        
    }   
    
    /**
     * Sleep for d milliseconds<br>
     * <br>
     * @param d sleep time
     */
    private static void sleep(int d) {
        try {
            Thread.sleep(d);
        } catch (InterruptedException ex) {
            LoggerFactory.getLogger("CourierSleeper")
                    .error("Sleep interrupted: {}", ex);
        }     
    }
}
